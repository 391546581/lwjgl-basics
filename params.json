{"tagline":"Some basic examples of \"modern\" GL - shaders, custom attributes, etc.","name":"Buffers","google":"","body":"## Java NIO Buffers\r\n\r\nThis is a short introduction to Java NIO buffers, which are commonly used in LWJGL to handle GL data. For a more detailed look at buffers, [see here](http://tutorials.jenkov.com/java-nio/buffers.html).\r\n\r\n### Intro\r\nA buffer is simply a block of memory which holds some data. For our purposes, you can think of it as an array of elements. However, instead of random access (e.g. `array[i]`), Buffers read and write data relative to their current position. To demonstrate, let's say we wish to create a buffer which holds four bytes, and then read those bytes out. You would create it like so:\r\n```java\r\n//LWJGL includes utilities for easily creating buffers\r\nByteBuffer buffer = BufferUtils.createByteBuffer(4);\r\n\r\n//\"relative put\" method, which places the byte and \r\n//then moves the position forward\r\nbuffer.put(a);\r\nbuffer.put(b);\r\nbuffer.put(c);\r\nbuffer.put(d);\r\n\r\n//flip the position to reset the relative position to zero\r\nbuffer.flip();\r\n\r\n//loop through all of the bytes that were written, using \"relative get\"\r\nfor (int i=0; i<buffer.limit(); i++) {\r\n    System.out.println( buffer.get() );\r\n}\r\n```\r\n\r\nTo understand what's happening, comparing it to a Java array:\r\n```java\r\n//creating the fixed-size array..\r\nbyte[] array = new byte[4];\r\n\r\n//position starts at 0\r\nint position = 0;\r\n\r\n//using a relative \"put\", position inreases each time\r\narray[position++] = a;\r\narray[position++] = b;\r\narray[position++] = c;\r\narray[position++] = d;\r\n\r\n//\"flipping\" our position/limit\r\nint limit = position;\r\nposition = 0;\r\n\r\n//printing our values\r\nfor (int i=0; i<limit; i++) {\r\n    //using a relative \"get\", position inreases each time\r\n    System.out.println( array[position++] );\r\n}\r\n```\r\n\r\nThe `capacity` of a buffer is similar to the length of an array; but as we can see from the above example, the `limit` of a buffer may not be equal to its capacity if we've only written a limited number of bytes.\r\n\r\nFor convenience, you can \"chain\" calls with get/put/etc. like so:\r\n```java\r\nbuffer.put(a).put(b).put(c).put(d);\r\n```\r\n\r\n### Practical Usage\r\n\r\nSo how does this relate to LWJGL and OpenGL? There are two common ways you'll be using buffers: writing data to GL (i.e. uploading texture data to the GPU), or reading data from GL (i.e. reading texture data from the GPU, or getting a certain value from the driver).\r\n\r\nLet's say we are creating a 1x1 blue RGBA texture, our buffer setup would look like this:\r\n\r\n```java\r\nint width = 1; //1 pixel wide\r\nint height = 1; //1 pixel high\r\nint bpp = 4; //4 bytes per pixel (RGBA)\r\n\r\n//create our buffer\r\nByteBuffer buffer = BufferUtils.createByteBuffer(width * height * bpp);\r\n\r\n//put the Red, Green, Blue, and Alpha bytes\r\nbuffer.put(0x00).put(0x00).put(0xFF).put(0xFF);\r\n\r\n//flip the buffer !!! this needs to be done before it can be read by GL\r\nbuffer.flip();\r\n\r\n//here is an example of sending data to GL... we will talk \r\n//more about this method in the Texture section\r\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, \r\n             width, height, 0, GL_RGBA, \r\n             GL_UNSIGNED_BYTE, buffer);\r\n```\r\n\r\nBelow is an example of getting data from GL:\r\n\r\n```java\r\nIntBuffer buffer = BufferUtils.createIntBuffer(1);\r\n\r\n//this will call the relative \"put\" on our buffer\r\nglGetInteger(GL_MAX_TEXURE_SIZE, buffer);\r\n\r\n//before we read back the values, we need to \"flip\" it\r\nbuffer.flip();\r\n\r\n//now we can get the max size as a Java int\r\nint maxSize = buffer.get();\r\n```\r\n\r\nAs described [in the docs](http://www.khronos.org/opengles/documentation/opengles1_0/html/glGetInteger.html), `GL_MAX_TEXTURE_SIZE` will give us one value. Some other GL parameters may return more values, and in that case we would have to create our buffer with a large enough capacity. Where possible, you should try to re-use buffers instead of always creating new ones.\r\n\r\nAlso note that LWJGL includes convenience methods for glGetInteger, glGenTextures, and various other calls. So the above code would actually be reduced to the following:\r\n\r\n```java\r\nint maxSize = glGetInteger(GL_MAX_TEXTURE_SIZE);\r\n```","note":"Don't delete this file! It's used internally to help with page regeneration."}